// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/stevedore/k8s/resources/resource.go

// Package mocks is a generated GoMock package.
package mocks

import (
	resources "github.com/gojek/stevedore/pkg/stevedore/k8s/resources"
	gomock "github.com/golang/mock/gomock"
	kubernetes "k8s.io/client-go/kubernetes"
	reflect "reflect"
)

// MockResource is a mock of Resource interface
type MockResource struct {
	ctrl     *gomock.Controller
	recorder *MockResourceMockRecorder
}

// MockResourceMockRecorder is the mock recorder for MockResource
type MockResourceMockRecorder struct {
	mock *MockResource
}

// NewMockResource creates a new mock instance
func NewMockResource(ctrl *gomock.Controller) *MockResource {
	mock := &MockResource{ctrl: ctrl}
	mock.recorder = &MockResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResource) EXPECT() *MockResourceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockResource) Get(kubeClient kubernetes.Interface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", kubeClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockResourceMockRecorder) Get(kubeClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResource)(nil).Get), kubeClient)
}

// Create mocks base method
func (m *MockResource) Create(kubeClient kubernetes.Interface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", kubeClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockResourceMockRecorder) Create(kubeClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResource)(nil).Create), kubeClient)
}

// MockResourceCreator is a mock of ResourceCreator interface
type MockResourceCreator struct {
	ctrl     *gomock.Controller
	recorder *MockResourceCreatorMockRecorder
}

// MockResourceCreatorMockRecorder is the mock recorder for MockResourceCreator
type MockResourceCreatorMockRecorder struct {
	mock *MockResourceCreator
}

// NewMockResourceCreator creates a new mock instance
func NewMockResourceCreator(ctrl *gomock.Controller) *MockResourceCreator {
	mock := &MockResourceCreator{ctrl: ctrl}
	mock.recorder = &MockResourceCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceCreator) EXPECT() *MockResourceCreatorMockRecorder {
	return m.recorder
}

// CreateIfNotExists mocks base method
func (m *MockResourceCreator) CreateIfNotExists(resource resources.Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIfNotExists", resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIfNotExists indicates an expected call of CreateIfNotExists
func (mr *MockResourceCreatorMockRecorder) CreateIfNotExists(resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIfNotExists", reflect.TypeOf((*MockResourceCreator)(nil).CreateIfNotExists), resource)
}
