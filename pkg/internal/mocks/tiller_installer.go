// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/stevedore/init/tiller_installer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	installer "k8s.io/helm/cmd/helm/installer"
	reflect "reflect"
)

// MockTillerInstaller is a mock of TillerInstaller interface
type MockTillerInstaller struct {
	ctrl     *gomock.Controller
	recorder *MockTillerInstallerMockRecorder
}

// MockTillerInstallerMockRecorder is the mock recorder for MockTillerInstaller
type MockTillerInstallerMockRecorder struct {
	mock *MockTillerInstaller
}

// NewMockTillerInstaller creates a new mock instance
func NewMockTillerInstaller(ctrl *gomock.Controller) *MockTillerInstaller {
	mock := &MockTillerInstaller{ctrl: ctrl}
	mock.recorder = &MockTillerInstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTillerInstaller) EXPECT() *MockTillerInstallerMockRecorder {
	return m.recorder
}

// Install mocks base method
func (m *MockTillerInstaller) Install(opts *installer.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockTillerInstallerMockRecorder) Install(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockTillerInstaller)(nil).Install), opts)
}

// Upgrade mocks base method
func (m *MockTillerInstaller) Upgrade(opts *installer.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upgrade indicates an expected call of Upgrade
func (mr *MockTillerInstallerMockRecorder) Upgrade(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockTillerInstaller)(nil).Upgrade), opts)
}

// Wait mocks base method
func (m *MockTillerInstaller) Wait(options *installer.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait
func (mr *MockTillerInstallerMockRecorder) Wait(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTillerInstaller)(nil).Wait), options)
}
